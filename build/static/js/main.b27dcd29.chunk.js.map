{"version":3,"sources":["BoardCard/CardX.js","BoardCard/CardO.js","BoardCard/index.jsx","GameBoard/index.jsx","Menu/index.jsx","App.js","index.js"],"names":["CardX","props","active","winner","className","defaultProps","CardO","BoardCard","turn","onSubmit","item","allowEnter","winCard","id","status","React","useState","card","setCard","useEffect","console","log","onClick","items","GameBoard","reset","SubmitReset","listItem","handleGameOver","setItem","setTurn","setAllowEnter","line","setLine","handleNextTurn","value","newItems","index","findIndex","box","a","resetBoard","checkValue","winningCondition","repeat","i","checkGame","some","map","includes","Menu","resetGame","App","setReset","gameOver","setGameOver","handleResetGame","setTimeout","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.b27dcd29.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CardX = (props) => {\n  const { active, winner } = props;\n  return <div className=\"card--x\" active={active ? \"\" : null} winner={winner ? \"\" : null}></div>;\n};\n\nCardX.propTypes = {\n  active: PropTypes.bool,\n  winner: PropTypes.bool,\n};\nCardX.defaultProps = {\n  active: false,\n  winner: false,\n};\n\nexport default CardX;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CardO = (props) => {\n  const { active, winner } = props;\n  return <div className=\"card--o\" active={active ? \"\" : null} winner={winner ? \"\" : null}></div>;\n};\n\nCardO.propTypes = {\n  active: PropTypes.bool,\n  winner: PropTypes.bool,\n};\nCardO.defaultProps = {\n  active: false,\n  winner: false,\n};\n\nexport default CardO;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./BoardCard.scss\";\nimport CardX from \"./CardX\";\nimport CardO from \"./CardO\";\n\nfunction BoardCard(props) {\n  const { turn, onSubmit, item, allowEnter, winCard } = props;\n  const { id, status } = item;\n  const [card, setCard] = React.useState(\"\");\n\n  const setActive = () => {\n    if (status === \"\" && allowEnter) {\n      console.log(\"Clicked\");\n      //   console.log(\"previus : \" + turn);\n      const value = turn % 2 === 0 ? \"x\" : \"o\";\n\n      onSubmit(id, value);\n    }\n  };\n\n  React.useEffect(() => {\n    console.log(\"on card effect \" + turn);\n    if (status === \"x\") {\n      setCard(<CardX active={true} winner={winCard} />);\n    } else if (status === \"o\") {\n      setCard(<CardO active={true} winner={winCard} />);\n    } else if (!allowEnter) {\n      setCard(\"\");\n    } else {\n      if (turn % 2 === 0) {\n        setCard(<CardX active={false} winner={false} />);\n      } else {\n        setCard(<CardO active={false} winner={false} />);\n      }\n    }\n  }, [turn, status, allowEnter, winCard]);\n\n  return (\n    <div className=\"card\" onClick={setActive}>\n      {card}\n    </div>\n  );\n}\n\nBoardCard.propTypes = {\n  turn: PropTypes.number.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  items: PropTypes.object,\n  allowEnter: PropTypes.bool,\n};\n\nBoardCard.defaultProps = {\n  items: {},\n  allowEnter: true,\n};\n\nexport default BoardCard;\n","import React from \"react\";\nimport \"./GameBoard.scss\";\nimport BoardCard from \"./../BoardCard\";\nimport PropTypes from \"prop-types\";\n\nGameBoard.propTypes = {\n  reset: PropTypes.bool,\n  SubmitReset: PropTypes.func,\n  listItem: PropTypes.array.isRequired,\n  handleGameOver: PropTypes.func,\n};\nGameBoard.defaultProps = {\n  reset: false,\n  SubmitReset: null,\n  handleGameOver: null,\n};\n\nfunction GameBoard(props) {\n  const { reset, SubmitReset, listItem, handleGameOver } = props;\n  const [items, setItem] = React.useState(listItem);\n  const [turn, setTurn] = React.useState(0);\n  const [allowEnter, setAllowEnter] = React.useState(true);\n  const [line, setLine] = React.useState([]);\n\n  const handleNextTurn = (id, value) => {\n    console.log(\"On handleNextTurn \" + turn);\n    //console.log(item);\n    let newItems = [...items];\n    const index = newItems.findIndex((box) => box.id === id);\n    if (index !== -1) {\n      newItems[index].status = value;\n      setItem(newItems);\n      if (turn < 9) {\n        setTurn(turn + 1);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    if (reset) {\n      const resetBoard = async () => {\n        setTurn(0);\n        setLine([]);\n        setItem(listItem);\n        setAllowEnter(true);\n      };\n      resetBoard();\n      SubmitReset();\n    }\n  }, [reset, SubmitReset, listItem]);\n\n  React.useEffect(() => {\n    const checkGame = (value) => {\n      const winningCondition = value.repeat(3);\n      for (let i = 0; i < 9; i += 3) {\n        let checkItem = `${items[i].status}${items[i + 1].status}${items[i + 2].status}`;\n        if (checkItem === winningCondition) {\n          setLine([i, i + 1, i + 2]);\n          return true;\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        let checkItem = `${items[i].status}${items[i + 3].status}${items[i + 6].status}`;\n        if (checkItem === winningCondition) {\n          setLine([i, i + 3, i + 6]);\n          return true;\n        }\n      }\n      if (`${items[0].status}${items[4].status}${items[8].status}` === winningCondition) {\n        setLine([0, 4, 8]);\n        return true;\n      }\n      if (`${items[2].status}${items[4].status}${items[6].status}` === winningCondition) {\n        setLine([2, 4, 6]);\n        return true;\n      }\n\n      return false;\n    };\n    const checkNull = () => {\n      return items.some((item) => item.status === \"\");\n    };\n\n    const checkValue = turn % 2 === 0 ? \"o\" : \"x\";\n    if (checkGame(checkValue)) {\n      handleGameOver(true, checkValue + \" Thắng\");\n      setAllowEnter(false);\n      setTurn(turn - 1);\n\n    } else if (!checkNull()) {\n      console.log(items);\n      handleGameOver(true, \"Hoà\");\n      setAllowEnter(false);\n      setTurn(0);\n    }\n    // else if (turn % 2 === 0 && turn < 9) {\n    //   console.log(\"on effect auto \" + turn);\n    //   //////////// RANDOM MOVE ///////////////////////////////\n    //   let index = 0;\n    //   while (true) {\n    //     index = Math.floor(Math.random() * item.length);\n    //     if (item[index].status === \"\") break;\n    //   }\n    //   //      console.log(\"random : \" + index);\n\n    //   let newItems = [...item];\n    //   newItems[index].status = \"x\";\n    //   setItem(newItems);\n    //   setTurn(turn + 1);\n    // }\n  }, [turn, items]);\n\n  return (\n    <div className=\"game-board\">\n      {console.log(\"on render \" + turn)}\n      {/* {console.log(\"rendered turn: \" + turn)} */}\n      {items.map((item) => (\n        <BoardCard key={item.id} turn={turn} onSubmit={handleNextTurn} item={item} allowEnter={allowEnter} winCard={line.includes(items.findIndex((i) => i === item))} />\n      ))}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport \"./Menu.scss\"\n\nfunction Menu(props) {\n    const { resetGame } = props\n\n    return (\n        <div className=\"menu\">\n            <button onClick={resetGame}>Chơi Lại</button>\n        </div>\n    )\n}\n\nMenu.propTypes = {\n    resetGame: PropTypes.func.isRequired,\n}\n\nexport default Menu\n\n","import React from \"react\";\nimport \"./App.scss\";\nimport GameBoard from \"./GameBoard\";\nimport Menu from \"./Menu\";\n\nexport default function App() {\n  const listItem = [\n    { id: 1, status: \"\" },\n    { id: 2, status: \"\" },\n    { id: 3, status: \"\" },\n    { id: 4, status: \"\" },\n    { id: 5, status: \"\" },\n    { id: 6, status: \"\" },\n    { id: 7, status: \"\" },\n    { id: 8, status: \"\" },\n    { id: 9, status: \"\" },\n  ];\n  const [reset, setReset] = React.useState(false);\n  const [gameOver, setGameOver] = React.useState({ status: false, winner: \"\" });\n\n  const handleResetGame = () => {\n    setReset(!reset);\n    setGameOver({ status: false, winner: \"\" });\n  };\n  const handleGameOver = (status, winner) => {\n    console.log(gameOver);\n    setGameOver({ status: status, winner: winner });\n  };\n  React.useEffect(() => {\n    const log = () => {\n      if (gameOver.status) {\n        setTimeout(() => {\n          console.log(gameOver);\n          //Alert Modal Winner\n          //alert(gameOver.winner.toUpperCase());\n        }, 300);\n        setGameOver({ status: false, winner: \"\" });\n      }\n    };\n    log();\n  }, [gameOver]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"grid--wrapper\">\n          <div className=\"victory\">\n            <div className=\"victory--x\"></div>\n            <div className=\"victory--o\"></div>\n          </div>\n\n          <GameBoard reset={reset} SubmitReset={handleResetGame} listItem={listItem} handleGameOver={handleGameOver} gameOver={gameOver.status} />\n        </div>\n      </div>\n      <Menu resetGame={handleResetGame} />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}